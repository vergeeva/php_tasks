<?php
//1 -----------------------------------------------------------------
//преобразовать дату в «компьютерном» представлении (системную дату) в
//«российский» формат, т.е. день/месяц/год (например, 17/05/2009).
	echo "Российский формат: " . date("d/m/Y");
?>

<?php
//2 -----------------------------------------------------------------
//Даны действительные числа А, В, С. 
//Найти максимальное и минимальное из этих чисел.
    $a=14;
    $b=18; 
    $c=10;
    $arr[]=$a;
    $arr[]=$b;
    $arr[]=$c;
?>
<p>Min: <?php echo min($arr); ?></p> <br>
<p>Max: <?php echo max($arr); ?></p>

<?php 
//3 -----------------------------------------------------------------
//Известны длины трёх сторон треугольника. 
//Вычислить периметр треугольника и площадь
	$a = 3;
	$b = 4;
	$c = 5;
	$p = ($a+$b+$c) / 2;
	$s = round(sqrt($p*($p-$a)*($p-$b)*($p-$c)),2);
?>
<p> данные треугольника:</p><br>
<p>1. a = <?php echo $a; ?></p> <br>
<p>2. b = <?php echo $b; ?></p> <br>
<p>3. c = <?php echo $c; ?></p> <br>
<p>4. p = <?php echo $p; ?></p> <br>
<p>5. s = <?php echo $s; ?></p>

<?php
//4 -----------------------------------------------------------------
//Задан вес в граммах. Определить вес в тоннах и килограммах.
	$a = 123456789;
	$b = $a / 1000;
	$c = $b / 1000;
    echo 'вес в граммах:'.$a;
    echo 'вес в килограммах:'.$b;
    echo 'вес в тоннах:'.$c;
?>

<?php
//5 -----------------------------------------------------------------
//Известен объем информации в байтах. Перевести в килобайты, мегабайты.
	$a = 1234567890;
	$b = $a / 8;
	$c = $b / 1024;
	$d = $c / 1024;
?>
<p>байты: <?php echo $a; ?></p><br>
<p>биты: <?php echo $b; ?></p><br>
<p>килобайты: <?php echo $c; ?></p><br>
<p>мегабайты: <?php echo $d; ?></p>

<?php
//6 -----------------------------------------------------------------
//Определить значение функции Z=1/(XY) при X и Y не равных 0.
	$x = 2;
	$y = 8;
	$z = 1 / ($x * $y);
?>
<p>x = <?php echo $x; ?></p><br>
<p>y = <?php echo $y; ?></p><br>
<p>z = <?php echo $z; ?></p><br>

<?php
//7 -----------------------------------------------------------------
//Дано натуральное число. 
//Определить, будет ли это число: чётным, кратным 4.
 $a = 4;
if ((($a % 2) == 0) and (($a % 4) == 0)) {
	echo true;
}
?>

<?php
//8 -----------------------------------------------------------------
//Дано натуральное число. 
//Определить, будет ли это число: нечётным, кратным 5.
 $a = 5;
if ((($a % 2) > 0) and (($a % 5) == 0)) {
	echo true;
}
?>

<?php
//9 -----------------------------------------------------------------
//Дано натуральное число. 
//Определить, будет ли это число: нечётным, кратным 7.
 $a = 7;
if ((($a % 2) > 0) and (($a % 7) == 0)) {
	echo true;
}
?>

<?php
//10 -----------------------------------------------------------------
//Дано натуральное число. 
//Определить, будет ли это число: чётным, кратным 10.
 $a = 10;
if ((($a % 2) == 0) and (($a % 10) == 0)) {
	echo true;
}
?>

<?php
//11 -----------------------------------------------------------------
//Имеется коробка со сторонами: A * B * C. 
//Определить, пройдёт ли она в дверь с размерами M * K.
	$a = 5;
	$b = 5;
	$c = 10;
	$m = 20;
	$k = 10;
	$p1 = $a * $b;
	$p2 = $b * $c;
	$p3 = $c * $a;
	$pmk = $m * $k;
	if (($pmk > $p1) or ($pmk > $p2) or ($pmk > $p3)) {
		printf("влезет");
	}
	else {
		printf("не влезет");
	}
?>

<?php
//12 -----------------------------------------------------------------
//Дано вещественное число. 
//Определить, какое это число: положительное, отрицательное, ноль.
	$a = 7;
	if ($a > 0) {
        printf("положительное");
	}
    else
    {
        if ($a == 0) {
            printf("это ноль");
        }
        else
        {
            printf("отрицательное");
        }
    }
?>

<?php
//13 -----------------------------------------------------------------
//Можно ли из бревна, имеющего диаметр поперечного сечения D, 
//выпилить квадратный брус шириной A?
	$D = 10; //диаметр
	$A = 5;//сторона
	if ($D == $A * sqrt(2)) {
		printf("it's ok");
	}
	else {
		printf("it's not ok");
	}
?>

<?php
//14 -----------------------------------------------------------------
//Можно ли в квадратном зале площадью S поместить круглую 
//сцену радиусом R так, чтобы от стены до сцены был проход не менее K?
	$k = 1;
	$R = 5;
	$S = 4 * pow($R-$k,2);
	echo $S;
?>

<?php
//15 -----------------------------------------------------------------
//Дан номер места в плацкартном вагоне. 
//Определить, какое это место: верхнее или нижнее, в купе или боковое.
	$a1=1;
if ($a1<37){
if ($a1 / 2 != intdiv($a1,2))
{ 
	echo $a1."\n нижняя, купе";
}
	else
	{echo $a1."\n верхняя, купе";}
}
else{
	if ($a1 / 2 != intdiv($a1,2))
	{
	echo $a1."\n нижняя, боковая";
 	}
	else{echo $a1."\n верхняя, боковая";}
}
?>
<?php
//16 -----------------------------------------------------------------
//Известна денежная сумма. Разменять её купюрами 500, 100,
//10 и монетой 2 руб., если это возможно.
$a = 1234;
if ($a % 2 == 0) 
{
    $b = intdiv($a, 500);  
    $b1 = $a % 500;
    $c = intdiv($b1, 100); 
    $c1 = $b1 % 100;
    $d = intdiv($c1, 10);  
    $d1 = $c1 % 10;
    $e = intdiv($d1, 2);   
    $e1 = $d1 % 2;
    echo $b."\n"; echo $c."\n"; echo $d."\n";echo $e."\n";echo $e1."\n";
}
else {printf("невозможно");}
?>

<?php
//17 -----------------------------------------------------------------
//Имеются две ёмкости: кубическая с ребром A, 
//цилиндрическая с высотой H и радиусом основания R. 
//Определить, поместится ли жидкость объёма M в первую ёмкость, 
//во вторую, в обе.
$M = 2;
$a = 3;
$h= 1;
$r=2;
$vq = $a*$a*$a;
$vo= $h*$r*$r*3.14;
if (($vq+$vo) >= $M) {echo"в оба; ";}
else 
{
    if (($vq>=$M ) or ($vo>=$M))
    {
        if  ($vq>=$M ) {echo"в куб; ";}
        if ($vo>=$M) {echo "в цилиндр; ";}
    }
    else {echo "никуда";}
}	
?>

<?php
//18 -----------------------------------------------------------------
//Имеются две ёмкости: кубическая с ребром A, 
//цилиндрическая с высотой H и радиусом основания R. Определить, 
//можно ли заполнить жидкостью объёма M первую ёмкость, вторую, обе.
$V = 27; //объем
$a = 3;// сторона
$h= 2;
$r=3;
$vq = $a*$a*$a;
$vo=$h*$r*$r*3.14;
if (($vq+$vo) == $V)
    {echo"в обе; ";}
else
{
    if (($vq==$V ) or ($vo==$V))
    {
        if  ($vq==$V ) {echo"в куб; ";} 
        if ($vo==$V) {echo "в цилиндр";}
    }
    else {echo "никуда";}
}
?>

<?php 
//19 -----------------------------------------------------------------
//Даны вещественные числа: X, Y, Z. Определить, существует
//ли треугольник с такими длинами сторон и, если существует, 
//будет ли он прямоугольным.
	$a=11;
	$b=5;
	$c=9;

if ($a+$b>$c && $a-$b<$c) 
{
    echo ("Треугольник существует, ");
    if ($c**2 == $a**2+$b**2) echo ("он прямоугольный");
    else echo ("но он не прямоугольный");
}
else echo ("Треугольник не существует");
?>


<?php
//20 -----------------------------------------------------------------
//Дано число X. 
//Определить, принадлежит ли это число заданному промежутку [a,b].
$X = 4;
$a = 1;
$b = 4;
if (($X >= $a) and ( $X<=$b)) {echo "принадлежит";}
else echo "не принадлежит";
?>

<?php
//21 -----------------------------------------------------------------
//Определить значение функции Z = 1/(XY ) при произвольных X и Y .
	$x = 0;
	$y = 8;

if (($x != 0) and ($y != 0))
{
    echo 1 / ($x * $y);
}
else echo "Ошибка деления на ноль";
?>

<?php
//22 -----------------------------------------------------------------
//Даны вещественные числа: A, B, C. Определить, выполняются ли 
//неравенства A < B B > C и какое именно неравенство выполняется.
$a = 1;
$b = 5;
$c = 3;
if ($a<$b and $b>$c) {echo "Неравенство выполняется";}
else echo "Неравенство не выполняется";
?>
<?php
//23 -----------------------------------------------------------------
//Даны вещественные числа X и Y . Вычислить Z. 
//Z = √(X x Y) при X > Y, Z = ln(X + Y ) в противном случае.
$x=2;
$y=3;
if ($x>$y)
{
    $z =sqrt($x*$y);
	echo "x > y \n";
}
else 
{
	$z = log10($x + $y);
	echo "x < y \n";
}
echo $z;
?>

<?php
//24 -----------------------------------------------------------------
//Даны вещественные положительные числа a, b, c, d. Выясните, может 
//ли прямоугольник со сторонами a, b уместиться внутри прямоугольника 
//со сторонами c, d так, чтобы каждая сторона внутреннего прямоугольника 
//была параллельна или перпендикулярна стороне внешнего прямоугольника.
    $a = 3;
    $b = 4;
    $c = 10;
    $d = 5;
    if ($a < $c) {
        if ($b < $d) {
            printf("Влезет");
        }
    }
    else printf("Не влезет");
?>

<?php 
//25 -----------------------------------------------------------------
//Дано вещественное число A. Вычислить f(A), если f(x) = x2 + 4x + 5, 
//при x ≤ 2; в противном случае f(x) = 1/ (x2 + 4x + 5).
$x = rand(1,20); echo $x."\n";
if ($x <= 2) {
    $f = pow($x,2) + 4*$x + 5;
    printf("x <= 2; f = "); printf($f);
}
else 
{
    $f = pow($x,2) + 4*$x + 5;
    printf("противный случай f= "); printf($f);
}
?>

<?php
//26 -----------------------------------------------------------------
//Дано вещественное число A. Вычислить f(A), если f(x) = 0, 
//f(x) = x2 + 4x + 5
//при x ≤ 0; f(x) = x при 0 <x <1, в противном случае f(x) = x4.
$a = rand(1,20); //echo $a;
$x = rand(-1,1); //echo $x;
if ($x <= 0)
{
    if (pow($x,2) + 4*$x + 5 == 0) echo "f(a) = ".pow($a,2) + 4*$a + 5;
    else echo "f(x) при x<=0 не равно нулю";
}
else
{
    if ($x>0 && $x<1) echo "f(x) = ".$x;
    else echo "противный случай: f(x) = ".rand(21,34);
}
?>

<?php
//27 -----------------------------------------------------------------
//Дано вещественное число A. Вычислить f(A), если f(x) = 0
//f(x) = x2 + 4x + 5
//при x ≤ 0; f(x) = x2-x при 0 < x < 1, в противном случае f(x) = 
//x2-sin(πx2).
$a = rand(1,20); //echo $a;
$x = rand(-10,10); //echo $x;
$x2 = rand(15,34);
if ($x <= 0)
{
    if (pow($x,2) + 4*$x + 5 == 0) echo "x <= 0; f(a) = ".pow($a,2) + 4*$a + 5;
    else echo "f(x) при x<=0 не равно нулю";
}
else
{
    if ($x>0 && $x<1) echo "x>0 && x<1; f(x) = ".$x2 -$x;
    else echo "противный случай: f(x) = ".$x2 - sin(3.14*$x2);
    //пи лучше заменить на 3.14
}
?>

<?php
//28 -----------------------------------------------------------------
//Составить алгоритм и программу для реализации 
//логических операций «И» и «ИЛИ» для двух переменных.
function AND_ ($arg1,$arg2)
{
    if ($arg1 == 1)
    {
        if ($arg2 == 1) return "true";
    }
    return "false";
}
$a = true;
$b = false;
printf(AND_($a,$b)); //false

function OR_ ($arg1,$arg2)
{
    if ($arg1 == 0)
    {
        if ($arg2 == 0) return "false";
    }
    return "true";
}
$a = true;
$b = false;
printf(OR_($a,$b)); //true

?>

<?php
//29 -----------------------------------------------------------------
//Известен ГОД. Определить, будет ли этот год високосным,
// и к какому веку этот год относится
$year = date ( 'Y' ) ;
$days_count = date('z', mktime(0, 0, 0, 12, 31, $year)) + 1;

if ($days_count == 365) {echo "Это високосный год";}
else {echo "Год не високосный";}
?>

<?php
//30 -----------------------------------------------------------------
//поиск максимального элемента в одномерном массиве.
$a = [1, 2, 3, 4, 15, 6, 7, 8, 9, 6];
$max = -100000;
for ($i = 1; $i < count($a); $i++) 
{
    if ($a[$i]>$max) $max = $a[$i];
}
print_r($max);
?>

<?php
//31 -----------------------------------------------------------------
//алгоритм сортировки массива «методом пузырька».
$data = [1, 2, 3, 4, 15, 6, 7, 8, 9, 6];
$count_elements = count($data); 
$iterations = $count_elements - 1;

for ($i=0; $i < $count_elements; $i++) {
    $changes = false;
    for ($j=0; $j < $iterations; $j++) {
        if ($data[$j] > $data[($j + 1)]) {
            $changes = true;
            list($data[$j], $data[($j + 1)]) = array($data[($j + 1)], $data[$j]);
        }
    }
    $iterations--;
    if (!$changes) {
        break;
    }
}        
print_r($data);
/*Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 6
    [5] => 6
    [6] => 7
    [7] => 8
    [8] => 9
    [9] => 15
)*/
?>

<?php
//32 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Поменять местами элементы, стоящие на чётных и нечётных местах:
// A[1] ↔ A[2]; A[3] ↔ A[4] …
    $a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    for ($i = 1; $i < count($a); $i+=2) {
        $temp= $a[$i];
        $a[$i] = $a[$i - 1];
        $a[$i - 1] = $temp;
    }
    print_r($a);
/*    Array
(
    [0] => 2
    [1] => 1
    [2] => 4
    [3] => 3
    [4] => 6
    [5] => 5
    [6] => 8
    [7] => 7
    [8] => 10
    [9] => 9
)*/
?>

<?php
//33 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Выполнить перемещение элементов массива по кругу вправо, 
//т. е. A[1] → A[2]; A[2] → A[3]; … A[n] → A[1].
    $a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    $length = count($a);
    $first = $a[0];
    for ($i = 0; $i < $length; $i++) {
        $a[$i] = $a[$i+1];
        if ($a == $length) {
            $temp = $a[0];
            $a[0] = $a[$i];
            $a[$i] = $temp;    
        }   
    }
    $a[9] = $first;
    print_r($a);
/*    Array
(
    [0] => 2
    [1] => 3
    [2] => 4
    [3] => 5
    [4] => 6
    [5] => 7
    [6] => 8
    [7] => 9
    [8] => 10
    [9] => 1
)*/
?>

<?php
//34 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Поменять местами первую и вторую половины массива.

$a=[1,2,3,4,5,6];
for ($i = 0; $i < count($a)/2; $i++)
{
		$t=$a[$i];
        $a[$i]=$a[count($a)/2+$i];
        $a[count($a)/2+$i]=$t;
}

print_r($a);
/*Array
(
    [0] => 4
    [1] => 5
    [2] => 6
    [3] => 1
    [4] => 2
    [5] => 3
)*/
?>

<?php
//35 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Поменять местами группу из M элементов, начинающихся с позиции 
//K с группой из M элементов, начинающихся с позиции P.
    $array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    $length = count($array);
    
    $M = 2; 
    $K = 0; 
    $P = 8;

    for ($i = 0; $i < $M; $i++) {
        $array_1[$i] = $array[$K];
        $K = $K + 1;
    } 

    for ($i = 0; $i < $M; $i++) {
        $array_2[$i] = $array[$i];
        $P = $P + 1;
    }

    print_r($array);
    print_r($array_1);
    print_r($array_2);
?>

<?php
//36 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Вставить группу из M новых элементов, начиная с позиции K.
$arr_old = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$arr_new = [];
$length = count($arr_old);
$M = 4; 
$K = 5; 
//Прилепили первый кусок до К
for ($i = 0; $i < $K; $i++) {
    $arr_new[$i] = $arr_old[$i];
}
//прилепили М значений
for ($i = $K; $i < $K + $M; $i++) {
    $arr_new[$i] = rand(1, 15);
}
$j = $K;
//Прилепили оставшийся кусок после К
for ($i = $K + $M; $i < $length + $M = 4; $i++) {
    $arr_new[$i] = $arr_old[$j];
    $j++;
}
print_r($arr_new);
/*Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
    [5] => 14
    [6] => 8
    [7] => 9
    [8] => 15
    [9] => 6
    [10] => 7
    [11] => 8
    [12] => 9
    [13] => 10
)*/
?>

<?php
//37 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Сумму элементов массива и количество положительных элементов 
//поставить на первое и второе место.
$myarr= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$n=6;
$k=3;
$s = array_sum($myarr);
	for($i = 0, $sum = 0; $i < 10; $i++)
	{ 
        if($myarr[$i] > 0)
	    { 
            $sum += $myarr[$i];
        }
    }
$arr2 = array($s,$sum);
$allarr = array_merge($arr2,$myarr);
print_r($allarr);
?>

<?php
//38 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Исключить из него M элементов, начиная с позиции K.
$myarr= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$n = 6;
$k=3;
$m = 2;

$newarr = array_splice($myarr, $k-1);
$newarr2 = array_splice($newarr,$m);
$newarr3 = array_splice($myarr, -($n-$m));
$r= array_merge($newarr3,$newarr2);

print_r($r);
?>

<?php
//39 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов.
// Исключить все нулевые элементы.
$myarr= [1, 2, 0, 4, 5, 0, 7, 8, 0, 10];
$new_arr = array_diff($myarr, array('0'));
print_r($new_arr);
?>

<?php
//40 -----------------------------------------------------------------
//дан одномерный массив числовых значений, насчитывающий N элементов. 
//После каждого отрицательного элемента вставить новый элемент, 
//равный квадрату этого отрицательного элемента.
$new_arr = [];
$arr = [1,-6,7,24,6,9,-2,1,-9,0,1,-34];
$length = count($arr);
for ($i = 0; $i < $length; $i++)
{
    array_push($new_arr, $arr[$i]);
    if ($arr[$i] < 0)
    {
        array_push($new_arr, pow($arr[$i],2));
    }
}
print_r($new_arr);
// Array
// (
//     [0] => 1
//     [1] => -6
//     [2] => 36
//     [3] => 7
//     [4] => 24
//     [5] => 6
//     [6] => 9
//     [7] => -2
//     [8] => 4
//     [9] => 1
//     [10] => -9
//     [11] => 81
//     [12] => 0
//     [13] => 1
//     [14] => -34
//     [15] => 1156
// )
?>
<?php
//41 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Определить, образуют ли элементы массива, расположенные 
//после отрицательного элемента, возрастающую последовательность.
$arr = [1,-6,5,7,9,13];
$length = count($arr);
function find_first_negative($arr)
{
    for ($i = 1; $i < count($arr); $i++)
    {
        if ($arr[$i]<0)
        {
            return $i;
        }
    }
    return -1;
}

function is_growing($arr, $start_index)
{
    for ($i = $start_index + 1; $i < count($arr); $i++)
    {
        if ($arr[$i-1]>$arr[$i]) 
        {
            return false;
        }
    }
    return true;
}
if (find_first_negative($arr) != -1)
{
    if (is_growing($arr, find_first_negative($arr)))
    {
        echo "образуют";
    }
    else 
    {
        echo "не образуют";
    }
}
?>
<?php
//42 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Определить, образуют ли элементы массива, расположенные перед первым 
//отрицательным элементом, убывающую последовательность.
$arr = [8,6,4,-7,9,13];
$length = count($arr);


function is_decreasing($arr, $last_index)
{
    for ($i = 1; $i < $last_index; $i++)
    {
        if ($arr[$i]>$arr[$i-1]) 
        {
            return false;
        }
    }
    return true;
}
if (find_first_negative($arr) != -1)
{
    if (is_decreasing($arr, find_first_negative($arr)))
    {
        echo "образуют";
    }
    else 
    {
        echo "не образуют";
    }
}
?>
<?php
//43 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Из элементов исходного массива построить два новых. В первый 
//должны входить только элементы с положительными значениями, 
//а во второй — только элементы с отрицательными значениями.
$arr = [8,-6,4,-7,9,13,-69];
$length = count($arr);
$positive_arr = [];
$negative_arr = [];
for ($i = 0; $i < $length; $i++)
{
    if ($arr[$i]>0) 
    {
        array_push($positive_arr, $arr[$i]);
    }
    else 
    {
        array_push($negative_arr, $arr[$i]);
    }
}
print_r($positive_arr);
print_r($negative_arr);
// Array
// (
//     [0] => 8
//     [1] => 4
//     [2] => 9
//     [3] => 13
// )
// Array
// (
//     [0] => -6
//     [1] => -7
//     [2] => -69
// )
?>
<?php
//44 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Добавить столько элементов, чтобы элементов с положительными и 
//отрицательными значениями стало бы поровну.
$arr = [1,4,-3,4];
$n=4;
$positive=0;
$negative=0;
print_r($arr);

for ($i =0; $i<$n;$i++) {
	if ($arr[$i] >= 0) {
      $positive++;
    }
    else $negative++;
}

if ($positive > $negative) {
    $result = $positive-$negative;
    $f1=1;
    }
    else {
    $f2=1;
    $result = $negative-$positive;
    }
    
    for ($i =0; $i<$result;$i++) {
    if ($f1 == 1) { array_push($arr, rand(-10, -1)); }
	if ($f2 == 1) { array_push($arr, rand(1, 10)); }
    }
	print_r($arr);
?>

<?php
//45 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Добавить к элементам массива такой новый элемент, чтобы сумма элементов 
//с положительными значениями стала бы равна модулю суммы элементов 
//с отрицательными значениями.
$arr = [1,4,-3,5,-8];
$n=5;
$positivesumm=0;
$negativesumm=0;
print_r($arr);

for ($i =0; $i<$n;$i++) {
	if ($arr[$i] >= 0) {
      $positivesumm = $positivesumm + $arr[$i];
    }
    else 
      $negativesumm = $negativesumm + abs($arr[$i]);
}

if ($positivesumm > $negativesumm) {
    $result = $positivesumm-$negativesumm;
    }
    else {
    $result = $negativesumm-$positivesumm;
    }
    
array_push($arr, $result);
print_r($arr);
?>

<?php
//46 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Дано положительное число T. Разделить это число между положительными 
//элементами массива пропорционально значениям этих элементов и добавить 
//полученные доли к соответствующим элементам.
$arr = [3,4,-5,1,-8];
$n=5;
$t=9;
$positive=0;
print_r($arr);

for ($i =0; $i<$n;$i++) {
	if ($arr[$i] >= 0) {
      $positive++;
    }
}

$del=$t/$positive;
for ($i =0; $i<$n;$i++) {
	if ($arr[$i] >= 0) {
      $arr[$i] = $arr[$i] + $del;
    }
}
	print_r($arr);
?>

<?php
//47 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Исключить из массива элементы, принадлежащие промежутку [B; C].
    $B = 2;
    $C = 5;
    $array= [1, 3, 4, 5, 6, 7, 8, 9, 10];
    for ($i = 0; $i<count($array); $i++) 
    {
        if (($i >= $B) and ($i <= $C)) 
        {
            unset($array[$i]);
        }
    }
    print_r($array);
 /*   Array
(
    [0] => 1
    [1] => 3
    [6] => 8
    [7] => 9
    [8] => 10
)*/
?>
<?php
//48 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Вместо каждого элемента с нулевым значением поставить 
//сумму двух предыдущих элементов массива.
$arr= [1, 3, 0, 5, 6, 7, 0, 9, 0];
$length = count($arr);
//предполагаем, что первый и второй эл. != 0
//Иначе негде взять сумму
for ($i = 2; $i < $length; $i++)
{
    if ($arr[$i] == 0)
    {
        $arr[$i] = $arr[$i-1] + $arr[$i-2];
    }
}
print_r($arr);
// Array
// (
//     [0] => 1
//     [1] => 3
//     [2] => 4
//     [3] => 5
//     [4] => 6
//     [5] => 7
//     [6] => 13
//     [7] => 9
//     [8] => 22
// )
?>

<?php
//49 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Определить, имеются ли в массиве два подряд идущих нуля.
$arr= [1, 3, 0, 0, 6, 7, 0, 9, 0];
$length = count($arr);

function is_have_two_nulls($arr)
{
    for ($i = 1; $i < count($arr); $i++)
    {
        if (($arr[$i] == 0) && ($arr[$i-1] == 0))
        {
            return true;
        }
    }
    return false;
}
if (is_have_two_nulls($arr))
{
    echo "В массиве есть два подряд идущих нуля";
}
else echo "В массиве нет двух подряд идущих нулей";
?>

<?php
//50 -----------------------------------------------------------------
//Дан одномерный массив числовых значений, насчитывающий N элементов. 
//Подсчитать количество чисел, делящихся на 3 нацело, и среднее 
//арифметическое чисел с чётными значениями. Поставить полученные 
//величины на первое и последнее места в массиве (увеличив массив 
//на 2 элемента).
$arr= [1, 2, 3, 122, 5, 18, 6, 9, 4];
$length = count($arr);
$count3 = 0;
$count2 = 0;
$sum = 0;

for ($i = 0; $i < count($arr); $i++)
{
    if ($arr[$i] % 3 == 0) $count3++;
    if ($arr[$i] % 2 == 0) 
    {
        $count2++;
        $sum+=$arr[$i];
    }
}
$average = 0;
if ($count2 != 0) $average =  $sum/$count2;
array_unshift($arr, $count3);
array_push($arr, $average);
print_r($arr);
// Array
// (
//     [0] => 4
//     [1] => 1
//     [2] => 2
//     [3] => 3
//     [4] => 122
//     [5] => 5
//     [6] => 18
//     [7] => 6
//     [8] => 9
//     [9] => 4
//     [10] => 30.4
// )
?>

<?php
//51 -----------------------------------------------------------------
//Заданы M строк символов, которые вводятся с клавиатуры. 
//Найти количество символов в самой длинной строке. 
//Выровнять строки по самой длинной строке, поставив перед 
//каждой строкой соответствующее количество звёздочек.
$arr= ['line', 'something', 'sleep == happier', 'vergeeva'];
$length = count($arr);
$max_line = $arr[0];
for ($i = 1; $i < $length ; $i++)
{
    if (strlen($arr[$i]) > strlen($max_line)) $max_line = $arr[$i];
}
$max_count = strlen($max_line);
echo 'Количество символов в самой длинной строке: '.$max_count.' ';
echo 'эта строка: '.$max_line.' ';
for ($i = 0; $i < $length; $i++)
{
    $difference = $max_count - strlen($arr[$i]);
    $stars = '';
    while ($difference!=0)
    {
        $stars = $stars.'*';
        $difference--;
    }

    $arr[$i] = $stars.$arr[$i];
}
print_r($arr);
// Количество символов в самой длинной строке: 16 эта строка: sleep == happier
//Array
// (
//     [0] => ************line
//     [1] => *******something
//     [2] => sleep == happier
//     [3] => ********vergeeva
// )
?>


<?php
//52 -----------------------------------------------------------------
//Заданы M строк символов, которые вводятся с клавиатуры. 
//Из заданных строк, каждая из которых представляет одно слово, 
//составить одну длинную строку, разделяя слова пробелами.
$arr= ['Nastya', 'wants', 'a', 'million', 'red', 'roses'];
$length = count($arr);
$long_line = '';
for ($i = 0; $i < $length; $i++)
{
    $long_line .= $arr[$i].' ';
}
print($long_line);
?>

<?php
//53 -----------------------------------------------------------------
//Заданы M строк слов, которые вводятся с клавиатуры. 
//Подсчитать количество гласных букв в каждой из заданных строк.
$arr= ['Nastya', 'wants', 'a', 'million', 'red', 'roses'];
$length = count($arr);
for ($i = 0; $i < $length; $i++)
{
    $count = preg_match_all('/[aeiouy]/i', $arr[$i], $m);
    echo 'количество гласных в ';
    echo $i+1;
    echo ' слове = '.$count.';';
}
?>

<?php
//54 -----------------------------------------------------------------
//Заданы M строк слов, которые вводятся с клавиатуры 
//(в каждой строке – одно слово). Вводится слог (последовательность букв). 
//Подсчитать количество таких слогов в каждой строке.
$arr= ['thanks', 'love', 'incredible', 'lover', 'clever', 'shimmer'];
$length = count($arr);
$syllable = ['e', 'r']; //Слог
for ($i = 0; $i < $length; $i++)
{
    $arr1 = str_split($arr[$i]);
    for ($j = 1; $j < count($arr1); $j++)
    {
        if ( $arr1[$j]== $syllable[1] &&$arr1[$j-1]== $syllable[0])
        {
            echo " слово ".$arr[$i]." содержит этот слог;"."<p></p>";
        }
    }
}
?>

<?php
//55 -----------------------------------------------------------------
//Заданы M строк слов, которые вводятся с клавиатуры 
//(в каждой строке – одно слово). Вводится слог (последовательность букв). 
//Удалить данный слог из каждой строки.
$arr= ['thnoanks', 'nolove', 'incredible', 'lover', 'clever', 'shimnomer'];
$length = count($arr);
$syllable = ['n', 'o']; //Слог
for ($i = 0; $i < $length; $i++)
{
    $arr1 = str_split($arr[$i]);
    for ($j = 1; $j < count($arr1); $j++)
    {
        if ( $arr1[$j]== $syllable[1] &&$arr1[$j-1]== $syllable[0])
        {
            unset($arr1[$j]);
            unset($arr1[$j-1]);
            $arr[$i] = implode($arr1);
        }
    }
}
print_r($arr);
// Array
// (
//     [0] => thanks
//     [1] => love
//     [2] => incredible
//     [3] => lover
//     [4] => clever
//     [5] => shimmer
// )
?>

<?php
//56 -----------------------------------------------------------------
//Заданы M строк символов, которые вводятся с клавиатуры. 
//Напечатать все центральные буквы строк нечетной длины.
$arr= ['thnoanks', 'nolove', 'incredible', 'lover', 'clever', 'shimnomer'];
$length = count($arr);
for ($i = 0; $i < $length; $i++)
{
    if (strlen($arr[$i])%2 !=0)
    {
        $center_index = (strlen($arr[$i]) - 1)/2;
        $arr1 = str_split($arr[$i]);
        echo 'Слово: '.$arr[$i].'; центр. буква: '.$arr1[$center_index]."\n ";
    }
}
// Слово: lover; центр. буква: v
// Слово: shimnomer; центр. буква: n
?>

<?php
//57 -----------------------------------------------------------------
//Заданы M строк символов, которые вводятся с клавиатуры. 
//Каждая строка содержит слово. Записать каждое слово в разрядку 
//(вставить по пробелу между буквами).
$arr= ['lover', 'clever', 'shimmer'];
$length = count($arr);
for ($i = 0; $i < $length; $i++)
{
    $long_line = '';
    $arr1 = str_split($arr[$i]);
    for ($j = 0; $j < count($arr1); $j++)
    {
        $long_line.=$arr1[$j].' ';
    }
    echo 'Слово: '.$arr[$i].' стало -> '.$long_line."\n";
}
// Слово: lover стало -> l o v e r 
// Слово: clever cтало -> c l e v e r 
// Слово: shimmer стало -> s h i m m e r 
?>

<?php
//58 -----------------------------------------------------------------
//Задана строка символов, в которой встречается символ
//«.». Поставить после каждого такого символа системное время ПК.
$line_of_symbols = 'this is. usual line';
$today = date("H:i:s"); 
$line_of_symbols = str_replace('.', '.'.$today, $line_of_symbols);
echo "новая строка: ".$line_of_symbols." ";

?>

<?php
//59 -----------------------------------------------------------------
//Заданы M строк, которые вводятся с клавиатуры. 
//Подсчитать количество пробелов в каждой из строк.
$arr= ['love_is..', 'ever never just', 'shine bright like a diamond'];
$length = count($arr);
for ($i = 0; $i < $length; $i++)
{
    $count = preg_match_all('/[ ]/i', $arr[$i], $m);
    echo "Строка: ".$arr[$i]."; пробелов: ".$count."\n";
}
?>

<?php
//60 -----------------------------------------------------------------
//Заданы M строк символов, которые вводятся с клавиатуры. 
//Каждая строка представляет собой последовательность
//символов, включающих в себя вопросительные знаки. 
//Заменить в каждой строке все имеющиеся вопросительные знаки звёздочками.
$arr= ['Что покушать?', 'Что?Где?Когда?', 'У матросов нет вопросов'];
$length = count($arr);
for ($i = 0; $i < $length; $i++)
{
    $arr[$i] = str_replace('?', '*', $arr[$i]);
}
print_r($arr);
// Array
// (
//     [0] => Что покушать*
//     [1] => Что*Где*Когда*
//     [2] => У матросов нет вопросов
// )
?>

<?php
//61 -----------------------------------------------------------------
// Последовательно вводятся числа. Определить сумму чисел с
// нечётными номерами и произведение чисел с чётными
// номерами (по порядку ввода). Подсчитать количество
// слагаемых и количество сомножителей. При вводе числа
// 55555 закончить работу
$arr= [1, 7, 2, 9, 1, 0, 2, 4, 1, 1];
$length = count($arr);
$sum = 0; //сумма
$composition = 1; //Произведение
for ($i = 0; $i < $length; $i++)
{
    if ($i%2 == 0)
    {
        $composition *= $arr[$i];
    }
    else
    {
        $sum += $arr[$i];
    }
}
echo 'Сумма нечетных номеров: '.$sum. "\n";
echo 'Произведение четных номеров: '.$composition;
?>

<?php
//62 -----------------------------------------------------------------
// Определить сумму вводимых положительных чисел. Причём
// числа с нечётными номерами (по порядку ввода)
// суммировать с обратным знаком, а числа с чётными
// номерами перед суммированием возводить в квадрат.
// Подсчитать количество слагаемых. При вводе первого
// отрицательного числа закончить работу.
$arr= [1, 7, 9, 9, 1, 0, 2, 4, 1, -1];
$length = count($arr);
$sum = 0; //сумма
$count = 0; //в нашем случае это кол-во эл. массива-1
//Но все равно посчитаем
for ($i = 0; $i < $length; $i++)
{
    if ($arr[$i] >= 0)
    {
        if ($i%2 == 0)
        {
            $sum += pow($arr[$i],2);
            $count++;
        }
        else
        {
            $sum += -$arr[$i];
            $count++;
        }
    }
    else break;
}
echo 'Сумма = '.$sum.'; Количество слагаемых = '.$count;
?>

<?php
//63 -----------------------------------------------------------------
// Даны число P и число H. Определить сумму чисел меньше P,
// произведение чисел больше H и количество чисел в
// диапазоне значений P и H. При вводе числа равного P или
// H, закончить работу.
$arr = [1, 7, 9, 16, 1, 2, 12, 4, 1, 20];
$length = count($arr); $P = 15; $H = 6;
//$P = 6; $H = 15;
echo "H =".$H."; P = ".$P."\n";
$sum_less_p = 0; //сумма чисел меньше P
$com_more_h = 1; //произведение чисел больше H
$count_between = 0; //количество чисел в диапазоне значений P и H.
array_push($arr, $H);

for ($i = 0; $i < $length; $i++)
{
    if ($arr[$i] != $P && $arr[$i] != $H)
    {
        if ($arr[$i] > $P && $arr[$i] < $H  )
        {
            $count_between++;
        }
        else
        {
            if ($arr[$i] > $H && $arr[$i] < $P)
            {
                $count_between++;
                $sum_less_p += $arr[$i];
                $com_more_h *= $arr[$i];
            }
            else
            {
                if ($arr[$i] < $P)
                {
                    $sum_less_p += $arr[$i];
                }
    
                if ($arr[$i] > $H)
                {
                    $com_more_h *= $arr[$i];
                }
            }
        }
    }
    else break;
}
echo 'сумма чисел меньше P ='.$sum_less_p."\n";
echo 'произведение чисел больше H ='.$com_more_h."\n";
echo 'количество чисел в диапазоне значений P и H.='.$count_between."\n";
?>

<?php
//64 -----------------------------------------------------------------
// Суммировать вводимые числа, среди которых нет нулевых.
// При вводе нуля обеспечить вывод текущего значения суммы.
// При вводе числа 99999 закончить работу.
$arr = [1, 7, 9, 16, 0, 2, 12, 0, 1, 20, 0, 99999];
$length = count($arr);
$sum = 0;
for ($i = 0; $i < $length; $i++)
{
    if ($arr[$i] != 99999)
    {
        $sum +=$arr[$i];
        if ($arr[$i] == 0) 
        {
            echo 'Эл. массива = 0, сумма = '.$sum."\n";
            $sum = 0;
            //Среди чисел появился ноль, обнуляем сумму
        }
    }
    else break;
}
?>

<?php
//65 -----------------------------------------------------------------
// Вводятся положительные числа. Определить сумму чисел,
// делящихся на положительное число B нацело. При вводе
// отрицательного числа закончить работу.
$arr = [1, 7, 9, 14, 0, 2, 28, 0, 1, 20, 0, 2170];
$length = count($arr);
$B = 14;
$sum = 0;
for ($i = 0; $i < $length; $i++)
{
    if ($arr[$i] >= 0)
    {
        if ($arr[$i] % $B == 0)
        {
            $sum += $arr[$i];
        }
    }
    else break;
}
echo 'Число: '.$B.' Сумма делящихся на число нацело: '.$sum;
?>

<?php
//66 -----------------------------------------------------------------
// Для вводимых чисел определить процент положительных и
// отрицательных чисел. При вводе числа −65432 закончить
// работу
$arr = [1, -7, 9, 14, -3, 2, -28, 25, -1, 20, 3, 2170,-65432];
$length = count($arr);
$positive_count = 0;
$negative_count = 0;

for ($i = 0; $i < $length; $i++)
{
    if ($arr[$i] != -65432)
    {
        if ($arr[$i] >= 0)
        {
            $positive_count++;
        }
        else
        {
            $negative_count++;
        }
    }
    else break;
}
echo 'Положительных: '.$positive_count.'; Отрицательных: '.$negative_count.'; Всего: '.($length - 1)."\n";
echo 'Процент + ='.(round(($positive_count/($length - 1))*100,2)).'%; ';
echo 'Процент - ='.(round(($negative_count/($length - 1))*100,2)).'%';
?>

<?php
//67 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти наибольший
// элемент столбца матрицы A, для которого сумма абсолютных
// значений элементов максимальна.
$m=3;
$n=5;
$count=0;
$matrix = [];
$summ = array();

for ($j = 0; $j < $n; $j++) //заполняем по столбцам
{
    for ($i = 0; $i < $m; $i++) 
    {
        $matrix[$i][$j] = rand(-20, 20);
        $summ[$j] += (abs($matrix[$i][$j])); //попутно считаем сумму
    }
}
function print_matrix($matrix, $M, $N) //Чтобы красиво печатало
{ //дальше используется эта функция
    for ($i = 0; $i < $M; $i++)
    {
        for ($j = 0; $j < $N; $j++)
        {
            echo $matrix[$i][$j]."\t";
        }
        echo "\n";
    }
}

print_matrix($matrix, $m, $n);

$max_sum = $summ[0];
for ($i = 0; $i < $n; $i++) 
{//Поиск индекса макс. суммы
  if ($summ[$i] > $max_sum) 
  {
  	 $max_sum = $summ[$i];
 	 $count = $i;
  }
}

$max_value = -1000000;
//поиск макс. значения в столбце j
for ($i = 0; $i < $m; $i++) 
{
    if ($matrix[$i][$count] >= $max_value) 
    {
        $max_value = $matrix[$i][$count];
    }
}
echo "Столбец:".($count+1)."\n"; //чтобы номер как при счете с 1-ого
echo "Его сумма:".$max_sum."\n";
echo "Максимальное значение в столбце:".$max_value."\n";
echo "Все суммы:"."\n";
print_r($summ);
?> 

<?php
//68 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти наибольшее
// значение среди средних значений для каждой строки
// матрицы
$m=3;
$n=5;
$matrix;
$average = array();

for ($i = 0; $i < $m; $i++) //заполняем по столбцам
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(1, 20);
    }
    $average[$i] = (array_sum($matrix[$i]))/$n;
}
print_matrix($matrix, $m, $n);
echo "Средние значения по строкам:"."\n";
print_r($average);
echo "Максимальное значение = ".(max($average));
?>

<?php
//69 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти наименьший
// элемент столбца матрицы A, для которого сумма абсолютных
// значений элементов максимальна.
$m=3;
$n=5;
$count=0;
$matrix;
$summ = array();

for ($j = 0; $j < $n; $j++) //заполняем по столбцам
{
    for ($i = 0; $i < $m; $i++) 
    {
        $matrix[$i][$j] = rand(-20, 20);
        $summ[$j] += (abs($matrix[$i][$j])); //попутно считаем сумму
    }
}

print_matrix($matrix, $m, $n);

$max_sum = $summ[0];
for ($i = 0; $i < $n; $i++) 
{//Поиск индекса макс. суммы
  if ($summ[$i] > $max_sum) 
  {
  	 $max_sum = $summ[$i];
 	 $count = $i;
  }
}

$min_value = 1000000;
//поиск макс. значения в столбце j
for ($i = 0; $i < $m; $i++) 
{
    if ($matrix[$i][$count] <= $min_value) 
    {
        $min_value = $matrix[$i][$count];
    }
}
echo "Столбец:".($count+1)."\n"; //чтобы номер как при счете с 1-ого
echo "Его сумма:".$max_sum."\n";
echo "Минимальное  значение в столбце:".$min_value."\n";
echo "Все суммы:"."\n";
print_r($summ);
?>

<?php
//70 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти наименьшее
// значение среди средних значений для каждой строки
// матрицы
$m=3;
$n=5;
$matrix;
$average = array();

for ($i = 0; $i < $m; $i++)
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(1, 20);
    }
    $average[$i] = (array_sum($matrix[$i]))/$n;
}
print_matrix($matrix, $m, $n);
echo "Средние значения по строкам:"."\n";
print_r($average);
echo "Минимальное значение = ".(min($average));
?>

<?php
//71 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Определить средние
// значения по всем строкам и столбцам матрицы. Результат
// оформить в виде матрицы из N + 1 строк и M + 1 столбцов.
$m=3;
$n=5;
$matrix;
$average_row = array(); //По строкам

for ($i = 0; $i < $m; $i++) //заполняем по строкам
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(1, 20);
    }
    $average_row[$i] = (array_sum($matrix[$i]))/$n;
}

$average_column = array(); //по столбцам

for ($j = 0; $j < $n; $j++) //заполняем по столбцам 
{
    for ($i = 0; $i < $m; $i++) 
    {
        $sum_column += $matrix[$i][$j];
    }
    $average_column[$j] = $sum_column/$n;
}

for ($i = 0; $i < $m; $i++) //добавим столбец
{
    $matrix[$i][$n] = $average_row[$i];
}

for ($j = 0; $j < $n; $j++) //добавим строку
{
    $matrix[$m][$j] = $average_column[$j];
}
$matrix[$m][$n] = ' ';//заполним пустую дыру пустотой
echo "\n"."старая матрица:"."\n";
print_matrix($matrix, $m, $n);
echo "Средние значения:"."\n";
print_r($average_row);
print_r($average_column);
echo "\n"."новая матрица:"."\n";
print_matrix($matrix, ($m + 1), ($n + 1));

?>

<?php
//72 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти сумму элементов
// всей матрицы. Определить, какую долю в этой сумме
// составляет сумма элементов каждого столбца. Результат
// оформить в виде матрицы из N + 1 строк и M столбцов.


$m=4;
$n=6;
$matrix;
$sum_of_all_el = 0;
//заполняем рандомом
for ($i = 0; $i < $m; $i++)
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(10, 25);
        $sum_of_all_el += $matrix[$i][$j];
    }
    //считаем сумму общую
}
$columns_sum = array();
//считаем сумму по столбцам
for ($j = 0; $j < $n; $j++) 
{
    $sum_column = 0;
    for ($i = 0; $i < $m; $i++) 
    {
        $sum_column += $matrix[$i][$j];
    }
    $columns_sum[$j] = $sum_column;
}
//считаем процент от общего + добавляем в матрицу
for ($j = 0; $j < $n; $j++) //добавим строку
{
    $matrix[$m][$j] = round(($columns_sum[$j]/$sum_of_all_el)*100,2);
}
print_matrix($matrix, ($m + 1), $n);
print_r($columns_sum);
echo "\n"."Общая сумма: ".$sum_of_all_el;
?>

<?php
//73 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти сумму элементов
// всей матрицы. Определить, какую долю в этой сумме
// составляет сумма элементов каждой строки. Результат
// оформить в виде матрицы из N строк и M+1 столбцов

$m=4;
$n=6;
$matrix;
$sum_of_all_el = 0;
//заполняем рандомом
for ($i = 0; $i < $m; $i++)
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(10, 25);
        $sum_of_all_el += $matrix[$i][$j];
    }
    //считаем сумму общую
}
$rows_sum = array();
//считаем сумму по строкам
for ($i = 0; $i < $m; $i++) 
{
    $sum_row = 0;
    for ($j = 0; $j < $n; $j++) 
    {
        $sum_row += $matrix[$i][$j];
    }
    $rows_sum[$i] = $sum_row;
}
//считаем процент от общего + добавляем в матрицу
for ($i = 0; $i < $m; $i++) //добавим столбец
{
    $matrix[$i][$n] = round(($rows_sum[$i]/$sum_of_all_el)*100,2);
}
print_matrix($matrix, $m, ($n+1));
print_r($rows_sum);
echo "\n"."Общая сумма: ".$sum_of_all_el;
?>

<?php
//74 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Определить, сколько
// отрицательных элементов содержится в каждом столбце и в
// каждой строке матрицы. Результат оформить в виде матрицы
// из N + 1 строк и M + 1 столбцов
$m=3;
$n=5;
$matrix;
$negative_row = array(); 

for ($i = 0; $i < $m; $i++) //заполняем по строкам
{
    $negative_row[$i] = 0;
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(-20, 20);
        if ($matrix[$i][$j] < 0) $negative_row[$i]++;
    }
}

$negative_column = array();  //по столбцам
for ($j = 0; $j < $n; $j++) //заполняем по столбцам 
{
    $negative_column[$j] = 0;
    for ($i = 0; $i < $m; $i++) 
    {
        if ($matrix[$i][$j] < 0) $negative_column[$j]++;
    }
}

for ($i = 0; $i < $m; $i++) //добавим столбец
{
    $matrix[$i][$n] = $negative_row[$i];
}

for ($j = 0; $j < $n; $j++) //добавим строку
{
    $matrix[$m][$j] = $negative_column[$j];
}
$matrix[$m][$n] = '×';//заполним пустую дыру пустотой
echo "\n"."старая матрица:"."\n";
print_matrix($matrix, $m, $n);
echo "\n"."новая матрица:"."\n";
print_matrix($matrix, ($m + 1), ($n + 1));
?>

<?php
//75 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Определить, сколько
// нулевых элементов содержится в верхних L строках матрицы
// и в левых К столбцах матрицы.
$m=3;
$n=5;
$L = rand(1, $m); //строки до L
$K = rand(1, $n); //столбцы до K
$matrix;
$nulls_in_rows = 0; 

for ($i = 0; $i < $m; $i++) //заполняем по строкам
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(0, 20);
    }
}
for ($i = 0; $i < $L; $i++) //ищем по строкам до L
{
    for ($j = 0; $j < $n; $j++) 
    {
        if ($matrix[$i][$j] == 0) 
        {
            $nulls_in_rows++;
        }
    }
}

$nulls_in_column = 0;  //по столбцам
for ($j = 0; $j < $K; $j++) //Ищем по столбцам до K
{
    for ($i = 0; $i < $m; $i++) 
    {
        if ($matrix[$i][$j] == 0) 
        {
            $nulls_in_column++;
        }
    }
}

echo "матрица:"."<p></p>";
print_matrix($matrix, $m, $n);
echo "нулей в строках до ".$L.": ".$nulls_in_rows."<p></p>";
echo "нулей в столбцах до ".$K.": ".$nulls_in_column."\n";

?>

<?php
//76 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Перемножить элементы
// каждого столбца матрицы с соответствующими элементами K-го столбца.

$m=3;
$n=5;
$K = rand(1, 5); //умножать на него
$matrix;
echo "K = ".$K."; Старая матрица:"."\n";
for ($i = 0; $i < $m; $i++) 
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(0, 20);
        echo $matrix[$i][$j]."\t";
        $matrix[$i][$j] *= $K;
    }
    echo "\n";
}

echo "\n"."Новая матрица:"."\n";
print_matrix($matrix, $m, $n);
?>

<?php
//77 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Просуммировать
// элементы каждой строки матрицы с соответствующими
// элементами L-й строки.

//Предполагаем, что строку не надо складывать саму с собой
$m=6;
$n=3;
$L = rand(0, ($m - 1));
$matrix;
echo "Номер строки = ".($L + 1)."; Старая матрица:"."\n";
//номер строки, как при счете
for ($i = 0; $i < $m; $i++) 
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(9, 20);
        echo $matrix[$i][$j]."\t";
    }
    echo "\n";
}

$line_L = $matrix[$L];
for ($i = 0; $i < $m; $i++) 
{
    for ($j = 0; $j < $n; $j++) 
    {
        if ($i != $L)
        {
            $matrix[$i][$j] += $line_L[$j];
        }
//Чтобы все строки просуммировать,
//надо убрать if
    }
}
echo "\n"."Новая матрица:"."\n";
print_matrix($matrix, $m, $n);
?>

<?php
//78 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Разделить элементы
// каждой строки на элемент этой строки с наибольшим
// значением.

$m=6;
$n=4;
$matrix = [];
$max_value_in_row = array();
echo "Старая матрица:"."\n";
for ($i = 0; $i < $m; $i++) 
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(9, 20);
        echo $matrix[$i][$j]."\t";
    }
    echo "\n";
    $max_value_in_row[$i] = max($matrix[$i]);
}

for ($i = 0; $i < $m; $i++)
{
    for ($j = 0; $j < $n; $j++)
    {
        $matrix[$i][$j] /= $max_value_in_row[$i];
        $matrix[$i][$j] = round($matrix[$i][$j], 2);
    }
}
echo "\n"."Новая матрица:"."\n";
print_matrix($matrix, $m, $n);
?>

<?php
//79 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Разделить элементы
// каждого столбца матрицы на элемент этого столбца с
// наибольшим значением
$m=6;
$n=4;
$matrix;
$max_value_in_column= array();
for ($j = 0; $j < $n; $j++) 
{
    for ($i = 0; $i < $m; $i++) 
    {
        $matrix[$i][$j] = rand(10, 25);
    }
}
echo "\n"."Старая матрица:"."\n";
print_matrix($matrix, $m, $n);
for ($j = 0; $j < $n; $j++) 
{
    $max_value_in_column = -1000000;
    for ($i = 0; $i < $m; $i++) 
    {
        if ($matrix[$i][$j] >= $max_value_in_column)
        {
            $max_value_in_column = $matrix[$i][$j];
        }
    }
    $max_value_in_column[$j] = $max_value_in_column; 
}
for ($i = 0; $i < $m; $i++)
{
    for ($j = 0; $j < $n; $j++)
    {
        $matrix[$i][$j] /= $max_value_in_column[$i];
        $matrix[$i][$j] = round($matrix[$i][$j], 2);
    }
}
echo "\n"."Новая матрица:"."\n";
print_matrix($matrix, $m, $n);
?>

<?php
//80 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Разделить элементы
// матрицы на элемент матрицы с наибольшим значением.
$m=6;
$n=4;
$matrix;
$max_value_in_row = array();
//Заполняем, попутно ищем макс. в каждой строке
for ($i = 0; $i < $m; $i++) 
{
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(10, 25);
    }
    $max_value_in_row[$i] = max($matrix[$i]);
}
echo "\n"."Старая матрица:"."\n";
print_matrix($matrix, $m, $n);
//макс. в массиве максимальных
$max_value_in_matrix = max($max_value_in_row);
for ($i = 0; $i < $m; $i++)
{
    for ($j = 0; $j < $n; $j++)
    {
        $matrix[$i][$j] /= $max_value_in_matrix;
        $matrix[$i][$j] = round($matrix[$i][$j], 2);
    }
}
echo "\n"."Новая матрица:"."\n";
print_matrix($matrix, $m, $n);
?>

<?php
//81 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Все элементы имеют
// целый тип. Дано целое число H. Определить, какие столбцы
// имеют хотя бы одно такое число, а какие не имеют.

$m=5;
$n=3;//строки
$h=5;
$f=0;
for ($i = 0; $i < $n; $i++) 
{
	for ($j = 0; $j < $m; $j++) 
	{
    	$matrix[$i][$j] = rand(10, 26);
	}	
}
print_matrix($matrix, $n, $m);

for ($i = 0; $i < $m; $i++) 
{
	for ($j = 0; $j < $n; $j++) 
	{
		if ($h == $matrix[$j][$i]) 
	 	{
			echo "<p>В столбце ". $i . " есть минимум 1 элемент со значением " . $h . "</p>";
			$f=1;
			break;
		}
}
if ($f == 0)
	echo "<p>В столбце ". $i . " нет элемента со значением " . $h . "</p>";
$f=0;
}

?>

<?php
//82 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Исключить из матрицы
// строку с номером L. Сомкнуть строки матрицы.
$m=6;
$n=4;
$l=2;
for ($i = 0; $i < $n; $i++) {
 for ($j = 0; $j < $m; $j++) {
    $matrix[$i][$j] = rand(10, 30);
}
}
echo "<p></p>"."Старая матрица:"."<p></p>"."Удаляем строку с индексом № ".$l."<p></p>";
print_matrix($matrix, $n, $m);

function delete_row_from_matrix($matrix, $row_index)
{
    if (is_array($matrix) && array_key_exists($row_index, $matrix))
    {
        unset($matrix[$row_index]);
        $matrix = array_values($matrix);
    }
    return $matrix;
}

$matrix = delete_row_from_matrix($matrix,$l);
echo "<p></p>"."Новая матрица:"."<p></p>";
print_matrix($matrix, $n, $m);

?>
<?php
//83 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Добавить к матрице
// строку и вставить ее под номером L.
$m=6;
$n=4;
$l=2;
for ($i = 0; $i < $n; $i++) 
{
	for ($j = 0; $j < $m; $j++) 
	{
    	$matrix[$i][$j] = rand(10, 30);
	}
}
echo "<p></p>"."Старая матрица:"."<p></p>"."Добавляем строку с индексом № ".$l."<p></p>";
print_matrix($matrix, $n, $m);
$new_matrix = [];
//Прилепили то, что стояло до l
for ($i = 0; $i < $l; $i++) 
{
    for ($j = 0; $j < $m; $j++) 
	{
        $new_matrix[$i][$j] = $matrix[$i][$j];
    }
}
//Прилепили новую строку
for ($j = 0; $j < $m; $j++) 
{
    $new_matrix[$l][$j] = rand(10, 30);
}
//Прилепили кусок после l
for ($i = $l ; $i < $n; $i++) 
{
    for ($j = 0; $j < $m; $j++) 
	{
        $new_matrix[($i+1)][$j] = $matrix[$i][$j];
    }
}

echo "<p></p>"."Новая матрица:"."<p></p>";
print_matrix($new_matrix, ($n+1), $m);
?>
<?php
//84 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Найти сумму
// элементов, стоящих на главной диагонали, и сумму
// элементов, стоящих на побочной диагонали (элементы
// главной диагонали имеют индексы от [0,0] до [N,N], а
// элементы побочной диагонали – от [N,0] до [0,N]).

$m=3;
$n=3;
$l=2;
$matrix;
$matrix = set_matrix_random($matrix,$n, $m);

$sum_of_key_diagonal = 0;
$sum_of_secondary_diagonal = 0;
echo "<p></p>"."матрица:"."<p></p>";
print_matrix($matrix, $n, $m);

for ($i = 0; $i < $n; $i++) 
{
    for ($j = 0; $j < $m; $j++) 
    {
        if ($i == $j)
        {
            $sum_of_key_diagonal += $matrix[$i][$j];
        }
        if ($j == ($m - 1 - $i))
        {
            $sum_of_secondary_diagonal += $matrix[$i][$j];
        }
    }
}
echo "Сумма для главной диагонали: ".$sum_of_key_diagonal."\n";
echo "Сумма для побочной диагонали: ".$sum_of_secondary_diagonal."\n";
?>

<?php
//85 -----------------------------------------------------------------
// Создать квадратную матрицу A, имеющую N строк и N
// столбцов со случайными элементами. Определить сумму
// элементов, расположенных параллельно главной диагонали
// (ближайшие к главной). Элементы главной диагонали имеют
// индексы от [0,0] до [N,N]
$matrix;
function set_matrix_random($M, $N)
{//лучше поздно, чем никогда
    for ($i = 0; $i < $M; $i++)
    {
        for ($j = 0; $j < $N; $j++) 
        {
            $matrix[$i][$j] = rand(10, 30);
        }
    }
    return $matrix;
}

$m=3;
$n=3;

$matrix = set_matrix_random($n, $m);
$sum_up = 0;
$sum_down = 0;
for ($i = 0; $i < $n; $i++) 
{
    for ($j = 0; $j < $m; $j++) 
    {
        if ($i == $j)
        {
            $sum_up += $matrix[$i][($j+1)];
            $sum_down += $matrix[$i][($j-1)];
        }
    }
}
echo "Матрица:"."\n";
print_matrix($matrix, $n, $m);
echo "\n"."Сумма для верхней паралельной: ".$sum_up."\n";
echo "Сумма для нижней паралельной: ".$sum_down."\n";
?>

<?php
//86 -----------------------------------------------------------------
// Создать квадратную матрицу A, имеющую N строк и N
// столбцов со случайными элементами. Определить
// произведение элементов, расположенных параллельно
// побочной диагонали (ближайшие к побочной). Элементы
// побочной диагонали имеют индексы от [N,0] до [0,N].

$m=3;
$n=3;

$matrix = set_matrix_random($n, $m);
$sum_up = 0;
$sum_down = 0;
for ($i = 0; $i < $n; $i++) 
{
    for ($j = 0; $j < $m; $j++) 
    {
        if ($j == ($m - 1 - $i))
        {
            $sum_up += $matrix[$i][($j-1)];
            $sum_down += $matrix[$i][($j+1)];
        }
    }
}
echo "Матрица:"."\n";
print_matrix($matrix, $n, $m);
echo "\n"."Сумма для верхней паралельной: ".$sum_up."\n";
echo "Сумма для нижней паралельной: ".$sum_down."\n";

?>

<?php
//87 -----------------------------------------------------------------
// Создать квадратную матрицу A, имеющую N строк и N
// столбцов со случайными элементами. Каждой паре
// элементов, симметричных относительно главной диагонали
// (ближайшие к главной), присвоить значения, равные
// полусумме этих симметричных значений (элементы главной
// диагонали имеют индексы от [0,0] до [N,N])
?>

<?php
//88 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Исходная матрица
// состоит из нулей и единиц. Добавить к матрице еще один
// столбец, каждый элемент которого делает количество
// единиц в каждой строке чётным.
function set_matrix_zeros_and_ones($M, $N)
{//лучше поздно, чем никогда
    for ($i = 0; $i < $M; $i++) 
    {
        for ($j = 0; $j < $N; $j++) 
        {
            $matrix[$i][$j] = random_int(0, 1);
        }
    }
    return $matrix;
}


$m=5;
$n=3;

$matrix = set_matrix_zeros_and_ones($n, $m);
$additional_column = array();

//считаем сумму единиц и в зависимости от этого заполняем доп. столбец
for ($i = 0; $i < $n; $i++) 
{
    $sum_of_ones = 0;
    for ($j = 0; $j < $m; $j++) 
    {
        if ($matrix[$i][$j] == 1)
        {
            $sum_of_ones ++;
        }
    }
    if ($sum_of_ones % 2 == 0)
    {
        $additional_column[$i] = 0;
    }
    else 
    {
        $additional_column[$i] = 1;
    }
}

echo "\n"."Старая матрица:"."\n";
print_matrix($matrix, $n, $m);

//Добавим дополнительный столбец
for ($i = 0; $i < $n; $i++) 
{
    $matrix[$i][$m] = $additional_column[$i];
}

echo "\n"."Новая матрица:"."\n";
print_matrix($matrix, $n, ($m + 1));
?>

<?php
//89 -----------------------------------------------------------------
// Создать квадратную матрицу A, имеющую N строк и N
// столбцов со случайными элементами. Найти сумму
// элементов, расположенных выше главной диагонали, и
// произведение элементов, расположенных выше побочной
// диагонали (элементы главной диагонали имеют индексы от
// [0,0] до [N,N], а элементы побочной диагонали — от [N,0]
// до [0,N])


$m=3;
$n=3;

$matrix = set_matrix_random($n, $m);

$com_up_secondary = 1;
$sum_up_key = 0;
for ($i = 0; $i < $n; $i++) 
{
    for ($j = 0; $j < $m; $j++) 
    {
        if ($i == $j)
        {//Главная диагональ
            $sum_up_key += $matrix[$i][($j+1)];
        }
        
        if ($j == ($m - 1 - $i))
        {//побочная диагональ
            if (($j != 0) && ($i != ($m -1)))
            {
                $com_up_secondary *= $matrix[$i][($j-1)];
            }
        }
    }
}
echo "\n"."произведение элементов, расположенных выше побочной диагонали: ".$com_up_secondary."\n";
echo "\n"."сумма элементов, расположенных выше главной диагонали: ".$sum_up_key."\n";
echo "\n"."Матрица:"."\n";
print_matrix($matrix, $n, $m);

?>

<?php
//90 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Дан номер строки L и
// номер столбца K, при помощи которых исходная матрица
// разбивается на четыре части. Найти сумму элементов
// каждой части


$m=6;
$n=7;
$L = 2;//Номер строки
$K = 3; //Номер столбца
$matrix = set_matrix_random($n, $m);
echo "Матрица:"."\n";
print_matrix($matrix, $n, $m);

//первый кусок: левый верхний
echo "\n"."Первая часть:"."\n";
$sum_part_one = 0;
for ($i = 0; $i < $L; $i++) 
{
    for ($j = 0; $j < $K; $j++) 
    {
        $sum_part_one +=$matrix[$i][$j];
        echo $matrix[$i][$j]."\t";
    }
    echo "\n";
}
echo "сумма первой части: ".$sum_part_one."\n"."Вторая:"."\n";

//второй кусок: правый верхний
$sum_part_two= 0;
for ($i = 0; $i < $L; $i++) 
{
    for ($j = ($K + 1); $j < $m; $j++) 
    {
        $sum_part_two +=$matrix[$i][$j];
        echo $matrix[$i][$j]."\t";
    }
    echo "\n";
}
echo "сумма второй части: ".$sum_part_two."\n"."Третья:"."\n";

//третий кусок: левый нижний
$sum_part_three = 0;
for ($i = ($L + 1); $i < $n; $i++) 
{
    for ($j = 0; $j < $K; $j++) 
    {
        $sum_part_three +=$matrix[$i][$j];
        echo $matrix[$i][$j]."\t";
    }
    echo "\n";
}
echo "сумма третьей части: ".$sum_part_three."\n"."Четвертая:"."\n";

//четвертый кусок: правый нижний
$sum_part_four = 0;
for ($i = ($L + 1); $i < $n; $i++) 
{
    for ($j = ($K + 1); $j < $m; $j++) 
    {
        $sum_part_four +=$matrix[$i][$j];
        echo $matrix[$i][$j]."\t";
    }
    echo "\n";
}
echo "сумма четвертой части: ".$sum_part_four."\n";

?>

<?php
//91 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Определить, сколько
// нулевых элементов содержится в каждом столбце и в каждой
// строке матрицы. Результат оформить в виде матрицы из
// N + 1 строк и M + 1 столбцов.
$m=3;
$n=5;
$matrix;

$nulls_row = array(); 
for ($i = 0; $i < $m; $i++) //заполняем по строкам
{
    $nulls_row[$i] = 0;
    for ($j = 0; $j < $n; $j++) 
    {
        $matrix[$i][$j] = rand(-20, 20);
        if ($matrix[$i][$j] == 0) $nulls_row [$i]++;
    }
}

$nulls_column = array();  //по столбцам
for ($j = 0; $j < $n; $j++) //заполняем по столбцам 
{
    $nulls_column[$j] = 0;
    for ($i = 0; $i < $m; $i++) 
    {
        if ($matrix[$i][$j] == 0) $nulls_column[$j]++;
    }
}

for ($i = 0; $i < $m; $i++) //добавим столбец
{
    $matrix[$i][$n] = $nulls_row[$i];
}

for ($j = 0; $j < $n; $j++) //добавим строку
{
    $matrix[$m][$j] = $nulls_column[$j];
}

$matrix[$m][$n] = '×';//заполним пустую дыру пустотой
echo "\n"."старая матрица:"."\n";
print_matrix($matrix, $m, $n);
echo "\n"."новая матрица:"."\n";
print_matrix($matrix, ($m + 1), ($n + 1));
?>

<?php
//92 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Дан номер строки L и
// номер столбца K, при помощи которых исходная матрица
// разбивается на четыре части. Найти среднее
// арифметическое элементов каждой части.

$m=6;
$n=7;
$L = 2;//Номер строки
$K = 3; //Номер столбца
$matrix = set_matrix_random($n, $m);
echo "Матрица:"."<p></p>";
print_matrix($matrix, $n, $m);
$count = 0;
//первый кусок: левый верхний
echo "<p></p>"."Первая часть:"."<p></p>";
$sum_part_one = 0;
for ($i = 0; $i < $L; $i++) 
{
    for ($j = 0; $j < $K; $j++) 
    {
        $sum_part_one +=$matrix[$i][$j];
        $count++;
        echo $matrix[$i][$j]."\t";
    }
    echo "<p></p>";
}
echo "среднее арифметическое первой части: ".(round(($sum_part_one/$count),2))."<p></p>"."Вторая:"."<p></p>";

//второй кусок: правый верхний
$sum_part_two= 0;
$count = 0;
for ($i = 0; $i < $L; $i++) 
{
    for ($j = ($K + 1); $j < $m; $j++) 
    {
        $sum_part_two +=$matrix[$i][$j];
        $count++;
        echo $matrix[$i][$j]."\t";
    }
    echo "<p></p>";
}
echo "среднее арифметическое второй части: ".(round(($sum_part_two/$count),2))."<p></p>"."Третья:"."<p></p>";

//третий кусок: левый нижний
$sum_part_three = 0;
$count = 0;
for ($i = ($L + 1); $i < $n; $i++) 
{
    for ($j = 0; $j < $K; $j++) 
    {
        $sum_part_three +=$matrix[$i][$j];
        $count++;
        echo $matrix[$i][$j]."\t";
    }
    echo "<p></p>";
}
echo "среднее арифметическое третьей части: ".(round(($sum_part_three/$count),2))."<p></p>"."Четвертая:"."<p></p>";

//четвертый кусок: правый нижний
$sum_part_four = 0;
$count = 0;
for ($i = ($L + 1); $i < $n; $i++) 
{
    for ($j = ($K + 1); $j < $m; $j++) 
    {
        $sum_part_four +=$matrix[$i][$j];
        $count++;
        echo $matrix[$i][$j]."\t";
    }
    echo "<p></p>";
}
echo "среднее арифметическое четвертой части: ".(round(($sum_part_four/$count),2))."<p></p>";

?>
<?php
//93 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Все элементы имеют
// целый тип. Дано целое число H. Определить, какие строки
// имеют хотя бы одно такое число, а какие не имеют.

function set_matrix_random_int($M, $N)
{//лучше поздно, чем никогда
    for ($i = 0; $i < $M; $i++) 
    {
        for ($j = 0; $j < $N; $j++) 
        {
            $matrix[$i][$j] = random_int(10, 15);
        }
    }
    return $matrix;
}
function is_line_has_number($matrix, $line, $number)
{
    for ($i = 0; $i < count($matrix[$line]); $i++) 
    {
        if ($matrix[$line][$i] == $number) return true;
    }
    return false;
}
$m=3;
$n=3;
$H = random_int(10,15);
$matrix = set_matrix_random_int($n, $m);
echo "Матрица:"."\n";
print_matrix($matrix, $n, $m);
for ($i = 0; $i < $n; $i++) 
{
    if(is_line_has_number($matrix, $i, $H))
    {
        echo "Число $H хотя бы раз встречается в $i строке"."\n";
    }
    else  echo "Число $H ни разу не встречается в $i строке"."\n";
}
?>
<?php
//94 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Исключить из матрицы
// столбец с номером K. Сомкнуть столбцы матрицы


$m=4;
$n=3;
$K = random_int(0,($m-1));
$matrix = set_matrix_random_int($n, $m);
echo "Старая матрица:"."\n";
print_matrix($matrix, $n, $m);

function array_col_remove($array, $col_index)
{
    if (is_array($array) && count($array))
    {
        foreach ($array as $row_index => $row)
        {
            if (array_key_exists($col_index, $row))
            {
                unset($array[$row_index][$col_index]);
                $array[$row_index] = array_values($array[$row_index]);
            }
        }
    }

    return $array;
}

echo "\n"."Удаляем $K столбец"."\n";
$matrix = array_col_remove($matrix, $K);
echo "Новая матрица:"."\n";
print_matrix($matrix, $n, ($m-1));

?>
<?php
//95 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Добавить к матрице
// столбец чисел и вставить его под номером K



?>
<?php
//96 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Добавить к элементам
// каждого столбца такой новый элемент, чтобы сумма
// положительных элементов стала бы равна модулю суммы
// отрицательных элементов. Результат оформить в виде
// матрицы из N + 1 строк и M столбцов.
?>
<?php

//97 -----------------------------------------------------------------
// Создать прямоугольную матрицу A, имеющую N строк и M
// столбцов со случайными элементами. Добавить к элементам
// каждой строки такой новый элемент, чтобы сумма
// положительных элементов стала бы равна модулю суммы
// отрицательных элементов. Результат оформить в виде
// матрицы из N строк и M + 1 столбцов.
?>
<?php
//98 -----------------------------------------------------------------
// Используя данные таблицы отсортировать блюда по
// возрастанию цены. Вывести отсортированный вариант списка
// блюд.
// Блюдо
// Цена
// Борщь
// 35
// Котлета
// 40
// Каша
// 20
// Чай
// 3
function print_dict($array){
	foreach($array as $name => $price)
    {
	echo "$name: $price <br>";
	}
}

$food = array("Борщ" => 35, "Котлета" => 40, "Каша" => 20, "Чай" => 3);
echo "Таблица по умолчанию<br>";
print_dict($food);

echo "Сортировка по ключам по возрастанию<br>";
ksort($food);
print_dict($food);

echo "Сортировка по значениям по возрастанию <br>";
asort($food);
print_dict($food);

?>
<?php
//99 -----------------------------------------------------------------
// Имеется список учеников и результаты трёх тестов (баллы
// от 0 до 100).Определить средний балл каждого ученика по
// трём тестам, вывести список учеников по убыванию
// среднего балла
function print_dict_with_arr($array){
	foreach($array as $name => $price)
    {
	    echo "$name: ";
	    print_r($price);
	    echo "\n";
	}
}
$tests = array("Иванов Иван" => [60, 78, 90], "Петрова Аня" => [90,35,50], "Вергеева Анастасия" => [100,99,100], "Васильев Василий" => [99,79,80]);

echo "Изначальные оценки за тесты:"."\n";
print_dict_with_arr($tests);
echo "\n";
$sum = 0;
foreach($tests as $name => $marks)
{
    $sum = 0;
    foreach($marks as $mark)
    {
        $sum+=$mark;
    }

    $tests[$name] =  array(round($sum/count($marks),2 ));
}
arsort($tests);
echo "Средний бал:"."\n";
print_dict_with_arr($tests);
?>
<?php
//100 -----------------------------------------------------------------
// Известны данные о количестве мальчиков и девочек в
// нескольких классах. Отсортировать названия классов по
// возрастанию процента мальчиков, определить количество
// классов, в которых мальчиков больше, чем девочек, и
// вывести названия этих классов отдельно

//класс: первое - количество девочек, второе - количество мальчиков
/*$classes = array("9Б": [15, 10], "10A": [6, 15],"10Б": [10, 14]);*/

?>
<?php
//101 -----------------------------------------------------------------
// Решить задачу, связанную с оценкой экономической
// деятельности группы предприятий на основе известных
// данных:

// название предприятий;
// плановый объем розничного товарооборота;
// фактический объем розничного товарооборота.
// Требуется определить:

// a. процент выполнения плана каждым предприятием;
// b. количество предприятий, недовыполнивших план на
// 10% и более;
// c. наименьший плановый товарооборот;
// d. упорядочить предприятия по убыванию планового
// товара.
?>